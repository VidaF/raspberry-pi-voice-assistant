# Voice Assistant with Raspberry Pi 5

This project implements a simple voice assistant on Raspberry Pi 5 that listens via a Bluetooth microphone, processes commands using OpenAI's Whisper and LLaMA 3.2:1B, and performs actions like temperature readings and servo control.

## Project Logic
1. Starts listening to the Bluetooth mic
2. Captures audio into a buffer for a few seconds
3. Transcribes using Whisper
4. If command is recognized by a fast parser, execute
5. Else sends to LLaMA 3.2:1B via Ollama for intent
6. Executes command (read temp or move servo)

##In/Out
Input from Mic
Input from Temp Sensor
Control a servo motor

## Features
 Real-time voice command recognition
Supports temperature and humidity readings (DHT11)
Controls SG90 servo motor (left, right, center)
Utilizes Whisper for transcription and LLaMA 3.2:1B for intent parsing
Fast fallback command parser for simple phrases

## Folder Structure
```
voice_assistance/
├── actions/                # Sensor and servo logic
│   └── temp_sensor.py
│   └── servo.py
├── audio/                 # Mic stream capture
│   └── mic_stream.py
├── nlp/                   # Intent parsing logic
│   └── intent.py
├── test_func/             # Pytest tests
│   └── test_temp_sensor.py
│   └── test_servo.py
│   └── test_command.py
│   └── test_stream.py
│   └── test_whisper_stream.py
├── documents/             # Datasheets for hardware
├── main.py                # Main voice assistant loop
├── requirements.txt       # Python dependencies
└── README.md              # This file
```

## Hardware Connections
- **DHT11 Sensor**
  - VCC → 3.3V (Pin 1, RPi5)
  - GND → GND (Pin 6, RPi5)
  - DATA → GPIO4 (Pin 7, RPi5)

- **SG90 Servo Motor**
  - Orange (PWM) → GPIO18 (Pin 12, RPi5)
  - Red (VCC) → 5V external power supply *(not from RPi5 pin!)*
  - Brown (GND) → Shared GND with Pi and power

- **Bluetooth Microphone**
  - Pair with Pi using Bluetooth settings (Instruction in bottom of this file)
  - Set as default input in PulseAudio or ALSA

## Setup Instructions

### Python Version
```bash
python3 --version
# Example output: Python 3.11.2
```

### OS
- Linux raspberrypi 6.6.74+rpt-rpi-2712 #1 SMP PREEMPT Debian 1:6.6.74-1+rpt1 (2025-01-27) aarch64 GNU/LinuX


### Python Dependencies
```bash
python3 -m venv whisper_env
source whisper_env/bin/activate
pip install -r requirements.txt
```

### Install pytest
```bash
pip install pytest
```

### Run Tests
```bash
pytest -s test_func/
```

### requirements.txt (sample)
```
adafruit-circuitpython-busdevice==5.2.11
adafruit-circuitpython-connectionmanager==3.1.3
adafruit-circuitpython-dht==4.0.7
adafruit-circuitpython-requests==4.1.10
adafruit-circuitpython-typing==1.11.2
faster-whisper==1.1.1
gpiozero==2.0.1
numpy==2.1.3
openai-whisper==20240930
pytest==8.3.5
sounddevice==0.5.1
soundfile==0.13.1
```

## Ollama + LLaMA 3.2:1B Setup
Install Ollama:
```bash
curl -fsSL https://ollama.com/install.sh | sh
```
Download model:
```bash
ollama run llama3.2:1b
```
If issues persist, try `ollama pull llama3.2:1b` first.

More on Ollama: https://ollama.com

## Reading Datasheets
Datasheets are in the `documents/` folder.
Install a PDF viewer:
```bash
sudo apt install evince
xdg-open documents/DHT11-datasheet.pdf
```
## Bluetooth Microphone Setup (Raspberry Pi)

###1. Enable and Access Bluetooth
bluetoothctl

Then, inside the interactive shell:

power on
agent on
default-agent
scan on

Wait for your Bluetooth mic to appear. Then run:
pair XX:XX:XX:XX:XX:XX
trust XX:XX:XX:XX:XX:XX
connect XX:XX:XX:XX:XX:XX

Replace XX:XX:XX:XX:XX:XX with your mic’s Bluetooth MAC address.

Once connected, exit:
exit

### 2. Install and Configure PulseAudio

Make sure PulseAudio is installed and running:

sudo apt install pulseaudio pulseaudio-module-bluetooth
pulseaudio --start

Then open the audio control panel:

pavucontrol

In the GUI:

Go to the Input Devices tab.
Locate your Bluetooth microphone.

Right-click it and select "Set as fallback".

Alternatively, from terminal:

pactl list sources short
pactl set-default-source <your-bluetooth-source-name>

### 3. Test Microphone Recording

arecord -f cd -D default test.wav
aplay test.wav

### Troubleshooting

Ensure the mic is using the HSP/HFP profile (not just A2DP).
If pulseaudio does not detect the mic, try rebooting.
Use bluez-tools or custom scripts to auto-connect at boot.





